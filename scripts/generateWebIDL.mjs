import fs from "node:fs";
import path from "node:path";
import css from "@webref/css";
import propertyList from "../lib/generated/propertyList.js";

const { properties } = await css.listAll();
const definitions = new Map();
if (Array.isArray(properties)) {
  for (const definition of properties) {
    const { name, styleDeclaration } = definition;
    if (propertyList.has(name)) {
      definitions.set(name, {
        name,
        styleDeclaration
      });
    }
  }
}

const idlAttr = "[CEReactions] attribute [LegacyNullToEmptyString] CSSOMString";
const idlAttrs = [`${idlAttr} cssFloat;`];
for (const value of propertyList.values()) {
  const { styleDeclaration } = value;
  if (Array.isArray(styleDeclaration)) {
    for (const property of styleDeclaration) {
      idlAttrs.push(`${idlAttr} ${property};`);
    }
  }
}

const [dateTodayFormatted] = new Date().toISOString().split("T");
const output = `// autogenerated - ${dateTodayFormatted}

[Exposed=Window]
interface CSSStyleProperties : CSSStyleDeclaration {
  ${idlAttrs.join("\n  ")}
};
`;

const { dirname } = import.meta;
const outputFile = path.resolve(dirname, "../lib/webidl/CSSStyleProperties.webidl");
fs.writeFileSync(outputFile, output);
